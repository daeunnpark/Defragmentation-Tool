§/*
	for(int i=96; i<128;i+=8){
		//printf("+1\n");
		//printf("how many\n");
		PUT(ram+i,0);
	}

	for(int i=224; i<304;i+=8){
		//printf("+1\n");
		//printf("how many\n");
		PUT(ram+i,0);

	}
	for(int i=160; i<224;i+=8){
		//printf("+1\n");
		//printf("how many\n");
		PUT(ram+i,0);
	}
	for(int i=32; i<96;i+=8){
		//printf("+1\n");
		//printf("how many\n");
		PUT(ram+i,0);
	}

*/

/*
PUT(ram+992, 32);
PUT(ram+1016,32);
PUT_ID(HDRP(ram+992),3);
PUT_ID(FTRP(ram+992),3);
PUT_ALLOC(HDRP(ram+992),1);
PUT_ALLOC(FTRP(ram+992),1);
*/


void print_BUF(void* tmp_buf){

	printf("---START BUF PRINTING---\n");	
	void* tmp = tmp_buf;
	while(GET_SIZE(tmp)!=0){	
		//	while(GET_ID(tmp)==1 ||GET_ID(tmp)==2 ||GET_ID(tmp)==3){
		printf("ID : %d ALLOC : %d SIZE: %d\n", GET_ID(tmp), GET_ALLOC(tmp), GET_SIZE(tmp));

		tmp+=GET_SIZE(tmp);
	}

	printf("---END BUF PRINTING---\n");

	}
/*
	// bp = first block in ram
	void* coalesce(void *bp,int RAM_COUNT){


		int RAM_COUNT2=0;
		while(RAM_COUNT2 < RAM_COUNT+1){ // stop it =

			int prev_alloc = GET_ALLOC(HDRP(bp)); // current		
			int next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));


			size_t size = GET_SIZE(HDRP(bp));

			if((!prev_alloc) && (!next_alloc)){
				size+=GET_SIZE(HDRP(NEXT_BLKP(bp)));
				PUT_SIZE(HDRP(bp),size);
				PUT_SIZE(FTRP(NEXT_BLKP(bp)),size);
				// NO change in bp

			} else {
				RAM_COUNT2+=GET_SIZE(bp);
				bp = NEXT_BLKP(bp);
			}
			// RESET RAM ptr
			/*	while(PREV_BLKP(bp)!= NULL){
				bp = PREV_BLKP(bp, RAM_SIZE);
				}
			 */

		}

		return bp; // Last block

	}
/*
void toBUF(void **bp, void *head){
printf("gggrr\n");

	struct block *cursor = head;
	while(cursor!=NULL){
		printf("HOW MANY");

		memcpy(bp,(*cursor).addr, (*cursor).size);
		*bp = NEXT_BLKP(bp);

		cursor = cursor->next;
printf("ggg\n");
	}

   PUT_SIZE(HDRP(*bp),16);
		   PUT_SIZE(FTRP(*bp),16);
		   PUT_ID(HDRP(*bp),0);
		   PUT_ID(FTRP(*bp),0);
		   PUT_ALLOC(HDRP(*bp),0);
		   PUT_ALLOC(FTRP(*bp),0);


printf("inf   %p\n", *bp);
}
*/


/*
void toBUF(void *bp, void *head){


	struct block *cursor = head;
	while(cursor!=NULL){
		printf("HOW MANY");

		memcpy(bp,(*cursor).addr, (*cursor).size);
		bp = NEXT_BLKP(bp);

		cursor = cursor->next;

	}

   PUT_SIZE(HDRP(bp),16);
		   PUT_SIZE(FTRP(bp),16);
		   PUT_ID(HDRP(bp),0);
		   PUT_ID(FTRP(bp),0);
		   PUT_ALLOC(HDRP(bp),0);
		   PUT_ALLOC(FTRP(bp),0);

	while(RAM_COUNT + GET_SIZE(cursor) < MAXSIZE+1){
		//	printf("sssskkkjjj\n");
		if(GET_ID(cursor)==1 || GET_ID(cursor)==2 || GET_ID(cursor)==3){

			printf("!!!HH!!!!!\n");

			// Not enough BUF
			if(BUF_COUNT + GET_SIZE(cursor) >  MAX_BUF_SIZE){
				if(MAX_BUF_SIZE < MAXSIZE+1){			
					ssize_t size = BUF_COUNT+GET_SIZE(cursor) - MAX_BUF_SIZE;
					//	INCR_BUF_SIZE+=size;
					printf("-----SBRK-----\n");
					if(cse320_sbrk(size)==NULL){
						//	printf(errno);
						perror("");					
						exit(errno);
					}
					BUF_COUNT+=GET_SIZE(cursor);
					MAX_BUF_SIZE+=size;
				}
				printf("Print error\n");

			}			
			memmove(BUF_cursor, cursor , GET_SIZE(cursor));
			//	BUF_COUNT+=GET_SIZE(BUF_cursor);

			print_RAM(tmp_buf,BUF_COUNT+GET_SIZE(BUF_cursor));
			printf("1RAM_COUNT: %d\n",BUF_COUNT);   
			BUF_cursor = sort(BUF_cursor,BUF_COUNT);		
			printf("122RAM_COUNT: %d\n",BUF_COUNT);	
			BUF_COUNT+=GET_SIZE(BUF_cursor);
			printf("133RAM_COUNT: %d\n",BUF_COUNT);			

			print_RAM(tmp_buf,BUF_COUNT);


			RAM_COUNT+=GET_SIZE(ram);
			cursor = NEXT_BLKP(cursor);

			BUF_cursor = NEXT_BLKP(BUF_cursor);

			printf("kkkjjj\n"); 

	
		if(prev_alloc && next_alloc){ // 1--1
			
RAM_COUNT+=size;
		} else if(prev_alloc && !next_alloc){ // 1-- --0
			size+=GET_SIZE(HDRP(NEXT_BLKP_C(bp,&RAM_SIZE)));

			PUT_SIZE(HDRP(bp),size); 
			PUT_SIZE(FTRP(NEXT_BLKP_C(bp, &RAM_SIZE)), size);  


		} else if(!prev_alloc && next_alloc){ // 0-- --1
			size+=GET_SIZE(FTRP(PREV_BLKP_C(bp, &RAM_SIZE)));

			PUT_SIZE(FTRP(bp), size);  
			PUT_SIZE(HDRP(PREV_BLKP_C(bp, &RAM_SIZE)),size); 

			bp= PREV_BLKP(bp, &RAM_SIZE);



		} else { // 0-- --0 
			size+=GET_SIZE(FTRP(PREV_BLKP_C(bp,&RAM_SIZE)))+ GET_SIZE(HDRP(NEXT_BLKP_C(bp,&RAM_SIZE)));

			PUT_SIZE(HDRP(PREV_BLKP_C(bp, &RAM_SIZE)),size);
			PUT_SIZE(FTRP(NEXT_BLKP_C(bp,&RAM_SIZE)), size); 

			bp= PREV_BLKP(bp,&RAM_SIZE);
		}
		bp = NEXT_BLKP_RAM(bp, &RAM_SIZE);

	pp§§

char* FIRST_BLKP(void* bp){
	while(GET_ID(bp)!=NULL){
		if(GET_ID(bp)==0 && GET_SIZE(bp)==128){
			break;

		}//else{
		bp= PREV_BLKP(bp);

	}
	return bp;
	}


//MAXSIZEbuf can be modified!! put as args?
//Returns first block with ID
char* FIRST_ID_BLKP(void* bp, int ID){

	int currentSIZEbuf = 0;
	while (currentSIZEbuf < MAXSIZEbuf){
		if(GET_ID(bp)!=ID){
			bp = NEXT_BLKP(bp);
			currentSIZEbuf+=GET_SIZE(bp);
		}else{
			return bp;

		}

	}

	return NULL;
}



*void PACK(){



}
*void PACK(){



}*void PACK(){



}
*void PACK(){



}
*void PACK(){



}
*void PACK(){



}


/*
	printf("SIZE: %d ID : %d ALLOC : %d \n", GET_SIZE(ram), GET_ID(ram), GET_ALLOC(ram));
	ram = NEXT_BLKP(ram);
	printf("NEXT SIZE: %d ID : %d ALLOC : %d \n", GET_SIZE(ram), GET_ID(ram), GET_ALLOC(ram));
	


void* temp = SWAP(PREV_BLKP(ram), ram);

	printf("AFSWAP SIZE: %d ID : %d ALLOC : %d \n", GET_SIZE(temp), GET_ID(temp), GET_ALLOC(temp));
	ram = NEXT_BLKP(ram);
	printf("NEXT SIZE: %d ID : %d ALLOC : %d \n", GET_SIZE(ram), GET_ID(ram), GET_ALLOC(ram));
	

*/

